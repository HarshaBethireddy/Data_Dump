package com.harsha.extractor;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.*;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class UnifiedBureauComparison {

    private static final String BASE_URL = "http://usaqwblbcus30.us.experian.eeca:8080/WebEngine/";
    private static final String USERNAME = "Harsh";
    private static final String PASSWORD = "Friday@0123!";
    private static final String BASE_PRE_FOLDER = "C:/Users/C24692E/Downloads/";
    private static final String BASE_POST_FOLDER = "C:/Users/C24692E/Downloads/";
    private static final String BASE_OUTPUT_DIRECTORY = "C:\\Users\\C24692E\\Downloads\\bureau_comparisons";
    private static final DateTimeFormatter RUN_DIR_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss_SSS");

    // MAXIMUM OPTIMIZATION: Increased instances dramatically
    private static final int NUM_BROWSER_INSTANCES = 15; // Increased from 10
    private static final String ADMIN_GROUP = "Administrators";
    
    // MAXIMUM OPTIMIZATION: Minimal timeouts
    private static final int DEFAULT_WAIT_SECONDS = 20; // Reduced from 30
    private static final int SHORT_WAIT_SECONDS = 3; // For quick operations
    private static final int TYPING_DELAY_MS = 15; // Reduced from 30 - MINIMUM SAFE VALUE

    private static final Map<String, CategoryConfig> CATEGORY_CONFIGS = new HashMap<>();

    static {
        CATEGORY_CONFIGS.put("ACQ", new CategoryConfig(
            new String[]{"View Only", "Credit Full", "All"}
        ));
        CATEGORY_CONFIGS.put("CLI", new CategoryConfig(
            new String[]{"View Only", "CLI Credit Full", "All"}
        ));
        CATEGORY_CONFIGS.put("PRQ", new CategoryConfig(
            new String[]{"View Only", "PreQual Credit Full", "All"}
        ));
        CATEGORY_CONFIGS.put("PREQUAL", new CategoryConfig(
            new String[]{"View Only", "PreQual Credit Full", "All"}
        ));
        CATEGORY_CONFIGS.put("Prequal", new CategoryConfig(
            new String[]{"View Only", "PreQual Credit Full", "All"}
        ));
        CATEGORY_CONFIGS.put("PreQual", new CategoryConfig(
            new String[]{"View Only", "PreQual Credit Full", "All"}
        ));
    }

    private static final List<String> APPID_KEYS = Arrays.asList(
        "APPID","AppID","AppId","appId","appid","APP_ID","app_id","APP-ID","app-id"
    );
    private static final List<String> ID_KEYS = Arrays.asList(
        "id","ID","Id","value","appId","APPID"
    );

    static class CategoryConfig {
        String[] menuPath;

        CategoryConfig(String... menuPath) {
            this.menuPath = menuPath;
        }
    }

    static class ApplicationData {
        String fileName;
        String preAppId;
        String postAppId;
        String category;

        ApplicationData(String fileName, String preAppId, String postAppId) {
            this.fileName = fileName;
            this.preAppId = preAppId;
            this.postAppId = postAppId;
            this.category = determineCategory(fileName);
        }

        boolean isValid() {
            return fileName != null && !fileName.trim().isEmpty() &&
                   preAppId != null && !preAppId.trim().isEmpty() &&
                   postAppId != null && !postAppId.trim().isEmpty();
        }

        private String determineCategory(String fileName) {
            if (fileName == null) return "UNKNOWN";
            String upperFileName = fileName.toUpperCase(Locale.ROOT);
            if (upperFileName.contains("CLI")) return "CLI";
            if (upperFileName.contains("PRQ") || 
                upperFileName.contains("PREQUAL") || 
                upperFileName.contains("PREQUAL")) return "PRQ";
            if (upperFileName.contains("ACQ")) return "ACQ";
            return "ACQ";
        }
    }

    static class RowData {
        String fileName;
        String preAppId;
        String postAppId;
        String category;

        RowData(String fileName, String preAppId, String postAppId, String category) {
            this.fileName = fileName;
            this.preAppId = preAppId;
            this.postAppId = postAppId;
            this.category = category;
        }
    }

    static class BureauSection {
        String bureauName;
        String type;
        int startLine;
        int endLine;

        BureauSection(String bureauName, String type, int startLine, int endLine) {
            this.bureauName = bureauName;
            this.type = type;
            this.startLine = startLine;
            this.endLine = endLine;
        }
    }

    // OPTIMIZED: Enhanced browser with aggressive settings
    static class BrowserInstance {
        WebDriver driver;
        WebDriverWait wait;
        WebDriverWait shortWait;
        WebDriverWait ultraShortWait; // NEW: For ultra-fast checks
        int instanceId;
        boolean isLoggedIn = false;
        boolean isOnSearchScreen = false;
        String currentCategory = null;
        long lastUsed = System.currentTimeMillis();

        BrowserInstance(int instanceId) {
            this.instanceId = instanceId;
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--start-maximized");
            options.addArguments("--disable-blink-features=AutomationControlled");
            options.addArguments("--disable-gpu");
            options.addArguments("--no-sandbox");
            options.addArguments("--disable-dev-shm-usage");
            options.addArguments("--disable-extensions");
            options.addArguments("--blink-settings=imagesEnabled=false");
            options.addArguments("--disable-logging");
            options.addArguments("--disable-in-process-stack-traces");
            options.setPageLoadStrategy(PageLoadStrategy.EAGER);
            // MAXIMUM OPTIMIZATION: Aggressive performance flags
            options.addArguments("--disable-javascript-harmony-shipping");
            options.addArguments("--disable-background-timer-throttling");
            options.addArguments("--disable-renderer-backgrounding");
            options.addArguments("--disable-backgrounding-occluded-windows");
            options.addArguments("--disable-features=TranslateUI");
            options.addArguments("--disable-ipc-flooding-protection");
            options.addArguments("--disable-client-side-phishing-detection");
            options.addArguments("--disable-default-apps");
            options.addArguments("--disable-hang-monitor");
            options.addArguments("--disable-popup-blocking");
            options.addArguments("--disable-prompt-on-repost");
            options.addArguments("--disable-sync");
            options.addArguments("--metrics-recording-only");
            options.addArguments("--no-first-run");
            options.addArguments("--safebrowsing-disable-auto-update");
            options.addArguments("--enable-automation");
            options.addArguments("--password-store=basic");
            options.addArguments("--use-mock-keychain");
            
            this.driver = new ChromeDriver(options);
            this.wait = new WebDriverWait(driver, Duration.ofSeconds(DEFAULT_WAIT_SECONDS));
            this.shortWait = new WebDriverWait(driver, Duration.ofSeconds(5));
            this.ultraShortWait = new WebDriverWait(driver, Duration.ofSeconds(SHORT_WAIT_SECONDS));
        }

        void cleanup() {
            try {
                if (driver != null) {
                    driver.quit();
                }
            } catch (Exception e) {
                System.err.println("Error closing browser instance " + instanceId + ": " + e.getMessage());
            }
        }
    }

    static class BatchResult {
        String fileName;
        boolean preSuccess;
        boolean postSuccess;
        String preOutputPath;
        String postOutputPath;
        ApplicationData app;

        BatchResult(ApplicationData app, boolean preSuccess, boolean postSuccess, 
                   String preOutputPath, String postOutputPath) {
            this.app = app;
            this.fileName = app.fileName;
            this.preSuccess = preSuccess;
            this.postSuccess = postSuccess;
            this.preOutputPath = preOutputPath;
            this.postOutputPath = postOutputPath;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executorService = null;
        long startTime = System.currentTimeMillis();

        try {
            System.out.println("=== Bureau Data Comparison Tool (MAXIMUM SPEED) ===\n");
            System.out.println("Using " + NUM_BROWSER_INSTANCES + " parallel browser instances");

            System.out.print("Enter PRE folder name (in Downloads): ");
            String preFolderName = scanner.nextLine().trim();
            String preFolderPath = BASE_PRE_FOLDER + preFolderName;

            System.out.print("Enter POST folder name (in Downloads): ");
            String postFolderName = scanner.nextLine().trim();
            String postFolderPath = BASE_POST_FOLDER + postFolderName;

            System.out.println("\n=== Step 1: Comparing APP IDs ===");
            String outputFolder = BASE_OUTPUT_DIRECTORY + "\\comparison_" + 
                                 LocalDateTime.now().format(RUN_DIR_FORMATTER);

            String excelFilePath = compareAppIDsSingleFile(
                preFolderPath, postFolderPath, outputFolder
            );

            if (excelFilePath == null) {
                System.out.println("\nNo Excel file generated. Exiting.");
                return;
            }

            System.out.println("\n=== Step 2: Extracting Bureau Data ===");
            System.out.println("Processing Excel file: " + excelFilePath);

            executorService = Executors.newFixedThreadPool(NUM_BROWSER_INSTANCES);

            List<ApplicationData> applications = readUnifiedExcelFile(excelFilePath);
            System.out.println("Total applications: " + applications.size());

            // Create browser pool
            List<BrowserInstance> browserPool = new ArrayList<>();
            System.out.println("Initializing " + NUM_BROWSER_INSTANCES + " browser instances...");
            
            CountDownLatch initLatch = new CountDownLatch(NUM_BROWSER_INSTANCES);
            List<Future<BrowserInstance>> initFutures = new ArrayList<>();
            
            // Parallel browser initialization
            for (int i = 0; i < NUM_BROWSER_INSTANCES; i++) {
                final int id = i;
                initFutures.add(executorService.submit(() -> {
                    try {
                        BrowserInstance browser = new BrowserInstance(id);
                        if (!performLogin(browser.driver, browser.wait)) {
                            throw new RuntimeException("Login failed for browser " + id);
                        }
                        browser.isLoggedIn = true;
                        
                        if (!selectAdministratorGroup(browser.driver, browser.wait)) {
                            throw new RuntimeException("Failed to select Administrator group for browser " + id);
                        }
                        System.out.println("Browser " + id + " initialized");
                        initLatch.countDown();
                        return browser;
                    } catch (Exception e) {
                        initLatch.countDown();
                        throw e;
                    }
                }));
            }
            
            initLatch.await(5, TimeUnit.MINUTES);
            for (Future<BrowserInstance> future : initFutures) {
                browserPool.add(future.get());
            }

            System.out.println("All browsers initialized. Starting extraction...");

            // Process applications
            List<Future<BatchResult>> futures = new ArrayList<>();
            BlockingQueue<BrowserInstance> availableBrowsers = new LinkedBlockingQueue<>(browserPool);
            
            for (ApplicationData app : applications) {
                Future<BatchResult> future = executorService.submit(() -> {
                    BrowserInstance browser = availableBrowsers.take();
                    try {
                        return processApplicationOptimized(browser, app, outputFolder);
                    } finally {
                        browser.lastUsed = System.currentTimeMillis();
                        availableBrowsers.put(browser);
                    }
                });
                futures.add(future);
            }

            // Collect results with progress tracking
            StringBuilder masterReport = new StringBuilder();
            masterReport.append("===== MASTER BUREAU DATA COMPARISON REPORT =====\n");
            masterReport.append("Generated: ").append(LocalDateTime.now()).append("\n");
            masterReport.append("Total Applications: ").append(applications.size()).append("\n");
            masterReport.append("==============================================\n\n");

            Map<String, StringBuilder> categoryReports = new HashMap<>();
            int completed = 0;
            int successful = 0;
            int failed = 0;

            for (Future<BatchResult> future : futures) {
                try {
                    BatchResult result = future.get();
                    completed++;
                    
                    if (completed % 25 == 0 || completed == applications.size()) {
                        long elapsed = (System.currentTimeMillis() - startTime) / 1000;
                        double rate = completed / (elapsed / 60.0);
                        long remaining = (long)((applications.size() - completed) / rate);
                        System.out.printf("Progress: %d/%d (%.1f%%) - Rate: %.1f/min - ETA: %d min%n", 
                            completed, applications.size(), 
                            (completed * 100.0 / applications.size()), 
                            rate, remaining);
                    }

                    String category = result.app.category;
                    categoryReports.putIfAbsent(category, new StringBuilder());
                    StringBuilder categoryReport = categoryReports.get(category);

                    if (result.preSuccess && result.postSuccess) {
                        successful++;
                        String comparisonResult = compareFilesWithBureauInfo(
                            result.preOutputPath, result.postOutputPath, result.app);
                        categoryReport.append(comparisonResult).append("\n\n");
                        masterReport.append(comparisonResult).append("\n\n");
                    } else {
                        failed++;
                        String errorMsg = "File: " + result.fileName + "\nStatus: EXTRACTION FAILED\n" +
                                         "Pre: " + (result.preSuccess ? "SUCCESS" : "FAILED") + "\n" +
                                         "Post: " + (result.postSuccess ? "SUCCESS" : "FAILED");
                        categoryReport.append(errorMsg).append("\n\n");
                        masterReport.append(errorMsg).append("\n\n");
                    }

                } catch (Exception e) {
                    failed++;
                    System.err.println("Error processing application: " + e.getMessage());
                }
            }

            // Save reports
            for (Map.Entry<String, StringBuilder> entry : categoryReports.entrySet()) {
                String category = entry.getKey();
                String categoryOutputFolder = outputFolder + "\\" + category + "\\";
                Files.createDirectories(Paths.get(categoryOutputFolder));
                
                String categoryReportPath = categoryOutputFolder + "comparison_report.txt";
                try (FileWriter writer = new FileWriter(categoryReportPath)) {
                    writer.write(entry.getValue().toString());
                }
            }

            String masterReportPath = outputFolder + "\\MASTER_comparison_report.txt";
            try (FileWriter writer = new FileWriter(masterReportPath)) {
                writer.write(masterReport.toString());
                System.out.println("\n✅ Master comparison report saved: " + masterReportPath);
            }

            // Cleanup
            for (BrowserInstance browser : browserPool) {
                browser.cleanup();
            }

            long totalTime = (System.currentTimeMillis() - startTime) / 1000;
            System.out.println("\n=== All Processing Complete ===");
            System.out.println("Total time: " + (totalTime / 60) + "m " + (totalTime % 60) + "s");
            System.out.println("Successful: " + successful);
            System.out.println("Failed: " + failed);
            System.out.println("Output location: " + outputFolder);

        } catch (Exception e) {
            System.err.println("Error in main execution: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (executorService != null) {
                executorService.shutdown();
                try {
                    if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                        executorService.shutdownNow();
                    }
                } catch (InterruptedException e) {
                    executorService.shutdownNow();
                    Thread.currentThread().interrupt();
                }
            }
            scanner.close();
        }
    }

    // OPTIMIZED: Minimal wait times
    private static BatchResult processApplicationOptimized(
            BrowserInstance browser, ApplicationData app, String baseOutputFolder) {
        
        try {
            String category = app.category;
            
            synchronized (browser) {
                if (!category.equals(browser.currentCategory) || !browser.isOnSearchScreen) {
                    CategoryConfig config = CATEGORY_CONFIGS.get(category);
                    if (config == null) {
                        throw new RuntimeException("Unknown category: " + category);
                    }
                    
                    if (!navigateToSearchScreen(browser.driver, browser.wait, config)) {
                        throw new RuntimeException("Failed to navigate to search for: " + category);
                    }
                    
                    browser.currentCategory = category;
                    browser.isOnSearchScreen = true;
                }
            }

            String categoryOutputFolder = baseOutputFolder + "\\" + category + "\\";
            Files.createDirectories(Paths.get(categoryOutputFolder));

            String preOutputPath = categoryOutputFolder + app.fileName + "_PRE_" + app.preAppId + ".txt";
            String postOutputPath = categoryOutputFolder + app.fileName + "_POST_" + app.postAppId + ".txt";

            boolean preSuccess = false;
            boolean postSuccess = false;

            synchronized (browser) {
                preSuccess = extractBureauDataForApplication(
                    browser.driver, browser.wait, app.preAppId, preOutputPath, "PRE");

                if (preSuccess) {
                    navigateBackToSearchOptimized(browser.driver, browser.wait);
                    browser.isOnSearchScreen = true;
                }

                postSuccess = extractBureauDataForApplication(
                    browser.driver, browser.wait, app.postAppId, postOutputPath, "POST");

                if (postSuccess) {
                    navigateBackToSearchOptimized(browser.driver, browser.wait);
                    browser.isOnSearchScreen = true;
                }
            }

            return new BatchResult(app, preSuccess, postSuccess, preOutputPath, postOutputPath);

        } catch (Exception e) {
            System.err.println("Error processing " + app.fileName + ": " + e.getMessage());
            return new BatchResult(app, false, false, null, null);
        }
    }

    // OPTIMIZED: Reduced all sleeps to minimum
    private static void navigateBackToSearchOptimized(WebDriver driver, WebDriverWait wait) {
        try {
            WebElement closeButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[.='Close']")));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", closeButton);
            Thread.sleep(300); // Minimum safe value

            handleConfirmationModalOptimized(driver, wait);

            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("txt-appid")));
            Thread.sleep(300); // Minimum safe value

        } catch (Exception e) {
            System.err.println("Error navigating back: " + e.getMessage());
            throw new RuntimeException("Failed to navigate back to search", e);
        }
    }

    private static void handleConfirmationModalOptimized(WebDriver driver, WebDriverWait wait) {
        try {
            WebElement okButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//*[@name='ok']")));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", okButton);
            Thread.sleep(300); // Minimum

        } catch (Exception e) {
            try {
                WebElement okButton = wait.until(ExpectedConditions.elementToBeClickable(
                    By.xpath("//input[@type='button' and @value='OK']")));
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", okButton);
            } catch (Exception altError) {
                // Silently continue
            }
        }
    }

    private static String readFileWithEncoding(File file) throws IOException {
        try {
            String content = Files.readString(file.toPath(), StandardCharsets.UTF_8);
            if (!content.contains("\uFFFD")) {
                return content;
            }
        } catch (Exception e) {
        }

        try {
            return Files.readString(file.toPath(), Charset.forName("Windows-1252"));
        } catch (Exception e) {
        }

        try {
            return Files.readString(file.toPath(), Charset.forName("ISO-8859-1"));
        } catch (Exception e) {
        }

        return Files.readString(file.toPath(), Charset.defaultCharset());
    }

    private static String compareAppIDsSingleFile(String preFolderPath, String postFolderPath, 
                                                  String outputFolder) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        Map<String, String> preAppIds = extractAppIDs(preFolderPath, mapper);
        Map<String, String> postAppIds = extractAppIDs(postFolderPath, mapper);

        Set<String> allFileNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
        allFileNames.addAll(preAppIds.keySet());
        allFileNames.addAll(postAppIds.keySet());

        File outDir = new File(outputFolder);
        if (!outDir.exists() && !outDir.mkdirs()) {
            throw new IllegalStateException("Failed to create output directory: " + outDir.getAbsolutePath());
        }

        List<RowData> allRows = new ArrayList<>();

        for (String fileName : allFileNames) {
            ApplicationData tempApp = new ApplicationData(fileName, 
                preAppIds.getOrDefault(fileName, ""),
                postAppIds.getOrDefault(fileName, ""));

            allRows.add(new RowData(
                fileName,
                preAppIds.getOrDefault(fileName, ""),
                postAppIds.getOrDefault(fileName, ""),
                tempApp.category
            ));
        }

        if (allRows.isEmpty()) {
            System.out.println("No data to process.");
            return null;
        }

        String outPath = new File(outDir, "APPIDComparison_ALL.xlsx").getAbsolutePath();
        writeUnifiedExcel(allRows, outPath);
        System.out.println("Wrote: " + outPath + " (" + allRows.size() + " rows)");

        return outPath;
    }

    private static Map<String, String> extractAppIDs(String folderPath, ObjectMapper mapper) throws Exception {
        Map<String, String> appIds = new HashMap<>();
        File folder = new File(folderPath);

        if (!folder.exists() || !folder.isDirectory()) {
            System.out.println("Folder not found: " + folderPath);
            return appIds;
        }

        File[] files = folder.listFiles();
        if (files == null) return appIds;

        for (File file : files) {
            if (file == null || !file.isFile()) continue;
            String name = file.getName();

            if (name.toLowerCase(Locale.ROOT).endsWith(".json") || 
                name.toLowerCase(Locale.ROOT).endsWith(".txt")) {

                try {
                    String content = readFileWithEncoding(file);
                    String appId = "";

                    if (name.endsWith(".json")) {
                        JsonNode root = mapper.readTree(content);
                        appId = findAppId(root);
                    } else if (name.endsWith(".txt")) {
                        appId = extractAppIdFromTxtFileName(name);
                        if (appId.isEmpty()) {
                            appId = extractAppIdFromTxtContent(content);
                        }
                    }

                    appIds.put(name, appId);
                } catch (Exception e) {
                    System.out.println("⚠️ Failed to parse " + name + ": " + e.getMessage());
                    appIds.put(name, "");
                }
            }
        }

        return appIds;
    }

    private static String extractAppIdFromTxtFileName(String fileName) {
        Pattern pattern = Pattern.compile("_(PRE|POST)_(\\d+)\\.txt$");
        Matcher matcher = pattern.matcher(fileName);
        if (matcher.find()) {
            return matcher.group(2);
        }
        return "";
    }

    private static String extractAppIdFromTxtContent(String content) {
        Pattern pattern = Pattern.compile("Application ID:\\s*(\\d+)");
        Matcher matcher = pattern.matcher(content);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return "";
    }

    private static String findAppId(JsonNode node) {
        if (node == null || node.isMissingNode() || node.isNull()) return "";

        if (node.isObject()) {
            for (String key : APPID_KEYS) {
                JsonNode candidate = node.get(key);
                String v = nodeToIdString(candidate);
                if (!v.isEmpty()) return v;
            }

            Iterator<Map.Entry<String, JsonNode>> it = node.fields();
            while (it.hasNext()) {
                Map.Entry<String, JsonNode> e = it.next();
                String fieldName = e.getKey();
                JsonNode value = e.getValue();

                if (fieldName != null && fieldName.toLowerCase(Locale.ROOT).contains("appid")) {
                    String v = nodeToIdString(value);
                    if (!v.isEmpty()) return v;
                }

                String deeper = findAppId(value);
                if (!deeper.isEmpty()) return deeper;
            }
        }

        if (node.isArray()) {
            for (JsonNode item : node) {
                String v = findAppId(item);
                if (!v.isEmpty()) return v;
            }
        }

        return "";
    }

    private static String nodeToIdString(JsonNode n) {
        if (n == null || n.isMissingNode() || n.isNull()) return "";
        if (n.isTextual() || n.isNumber() || n.isBoolean()) {
            return n.asText();
        }
        if (n.isObject()) {
            for (String idKey : ID_KEYS) {
                JsonNode inner = n.get(idKey);
                if (inner != null && !inner.isNull()) {
                    String v = nodeToIdString(inner);
                    if (!v.isEmpty()) return v;
                }
            }
            Iterator<Map.Entry<String, JsonNode>> it = n.fields();
            while (it.hasNext()) {
                Map.Entry<String, JsonNode> e = it.next();
                String v = nodeToIdString(e.getValue());
                if (!v.isEmpty()) return v;
            }
        }
        if (n.isArray()) {
            for (JsonNode item : n) {
                String v = nodeToIdString(item);
                if (!v.isEmpty()) return v;
            }
        }
        return "";
    }

    private static void writeUnifiedExcel(List<RowData> rows, String excelPath) throws Exception {
        try (Workbook workbook = new XSSFWorkbook();
             FileOutputStream fos = new FileOutputStream(excelPath)) {

            Sheet sheet = workbook.createSheet("AppID Comparison");

            Row header = sheet.createRow(0);
            header.createCell(0).setCellValue("File Name");
            header.createCell(1).setCellValue("Pre-AppID");
            header.createCell(2).setCellValue("Post-AppID");
            header.createCell(3).setCellValue("Category");

            int rowIndex = 1;
            for (RowData rd : rows) {
                Row r = sheet.createRow(rowIndex++);
                r.createCell(0).setCellValue(rd.fileName);
                r.createCell(1).setCellValue(rd.preAppId);
                r.createCell(2).setCellValue(rd.postAppId);
                r.createCell(3).setCellValue(rd.category);
            }

            for (int i = 0; i < 4; i++) sheet.autoSizeColumn(i);
            workbook.write(fos);
        }
    }

    private static boolean selectAdministratorGroup(WebDriver driver, WebDriverWait wait) {
        try {
            WebElement groupsSelectEl = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("groups")));
            Select groupsSelect = new Select(groupsSelectEl);
            groupsSelect.selectByVisibleText(ADMIN_GROUP);

            WebElement submitBtn = wait.until(ExpectedConditions.elementToBeClickable(By.id("id2")));
            submitBtn.click();

            Thread.sleep(800); // Reduced from 1500

            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("menu-wrapper")));
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("menu")));

            return true;

        } catch (Exception e) {
            System.err.println("Error selecting Administrator group: " + e.getMessage());
            return false;
        }
    }

    private static boolean navigateToSearchScreen(WebDriver driver, WebDriverWait wait, CategoryConfig config) {
        try {
            openMenuAndClick(driver, wait, config.menuPath);
            Thread.sleep(800); // Reduced from 1500
            return true;
        } catch (Exception e) {
            System.err.println("Error navigating to search: " + e.getMessage());
            return false;
        }
    }

    private static List<ApplicationData> readUnifiedExcelFile(String excelPath) {
        List<ApplicationData> applications = new ArrayList<>();

        try (FileInputStream fis = new FileInputStream(excelPath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String fileName = getCellValueAsString(row.getCell(0));
                String preAppId = getCellValueAsString(row.getCell(1));
                String postAppId = getCellValueAsString(row.getCell(2));

                ApplicationData appData = new ApplicationData(fileName, preAppId, postAppId);

                if (appData.isValid()) {
                    applications.add(appData);
                }
            }

        } catch (IOException e) {
            System.err.println("Error reading Excel: " + e.getMessage());
        }

        return applications;
    }

    private static String getCellValueAsString(Cell cell) {
        if (cell == null) return null;

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                double numValue = cell.getNumericCellValue();
                if (numValue == Math.floor(numValue)) {
                    return String.valueOf((long) numValue);
                }
                return String.valueOf(numValue);
            case BLANK:
                return null;
            default:
                return cell.toString().trim();
        }
    }

    private static boolean performLogin(WebDriver driver, WebDriverWait wait) {
        try {
            driver.get(BASE_URL);
            Thread.sleep(800); // Reduced from 1500

            WebElement usernameInput = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("idToken1")));
            WebElement passwordInput = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("idToken2")));
            WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(By.id("loginButton_0")));

            usernameInput.clear();
            usernameInput.sendKeys(USERNAME);
            passwordInput.clear();
            passwordInput.sendKeys(PASSWORD);
            loginButton.click();

            Thread.sleep(800); // Reduced from 1500
            return true;

        } catch (Exception e) {
            System.err.println("Login error: " + e.getMessage());
            return false;
        }
    }

    private static boolean extractBureauDataForApplication(WebDriver driver, WebDriverWait wait, 
                                                          String applicationId, String outputPath, String type) {
        try {
            fillApplicationIdAndSearch(driver, wait, applicationId);
            clickOpenApplicationLink(driver, wait);
            clickViewBureauButton(driver, wait);
            extractBureauData(driver, wait, applicationId, outputPath, type);
            return true;

        } catch (Exception e) {
            System.err.println("Extraction error for " + type + " " + applicationId + ": " + e.getMessage());
            return false;
        }
    }

    // OPTIMIZED: Minimum typing delay - KEPT AS REQUIRED
    private static void fillApplicationIdAndSearch(WebDriver driver, WebDriverWait wait, String applicationId) {
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("txt-appid")));
            Thread.sleep(500); // Reduced from 1000

            WebElement appIdField = wait.until(ExpectedConditions.elementToBeClickable(By.id("txt-appid")));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", appIdField);
            appIdField.click();

            appIdField.sendKeys(Keys.CONTROL + "a");
            appIdField.sendKeys(Keys.DELETE);
            Thread.sleep(300); // Reduced from 500

            // TYPING EFFECT - KEPT AS REQUIRED but at minimum safe speed
            for (char c : applicationId.toCharArray()) {
                appIdField.sendKeys(String.valueOf(c));
                Thread.sleep(TYPING_DELAY_MS); // 15ms - minimum safe value
            }

            wait.until(ExpectedConditions.attributeToBe(By.id("txt-appid"), "value", applicationId));
            Thread.sleep(500); // Reduced from 1000

            WebElement searchButton = wait.until(ExpectedConditions.elementToBeClickable(By.id("btn-search")));
            searchButton.click();

            Thread.sleep(800); // Reduced from 1500

        } catch (Exception e) {
            System.err.println("Error in fillApplicationIdAndSearch: " + e.getMessage());
            throw new RuntimeException("Failed to search for: " + applicationId, e);
        }
    }

    private static void clickOpenApplicationLink(WebDriver driver, WebDriverWait wait) {
        WebElement openLink = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//table[@id='datagrid']//td//div//center//a")));
        openLink.click();
        try { Thread.sleep(800); } catch (InterruptedException e) {} // Reduced from 1500
    }

    private static void clickViewBureauButton(WebDriver driver, WebDriverWait wait) {
        WebElement viewBureauButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//button[.='View Bureau']")));
        viewBureauButton.click();
        try { Thread.sleep(500); } catch (InterruptedException e) {} // Reduced from 1000
    }

    private static void extractBureauData(WebDriver driver, WebDriverWait wait, String applicationId, 
                                         String outputPath, String type) throws IOException {
        try { Thread.sleep(1000); } catch (InterruptedException e) {} // Reduced from 2000
        
        String mainWindow = driver.getWindowHandle();
        Set<String> allWindows = driver.getWindowHandles();
        String popupWindow = null;

        for (String windowHandle : allWindows) {
            if (!windowHandle.equals(mainWindow)) {
                popupWindow = windowHandle;
                break;
            }
        }

        if (popupWindow == null) {
            throw new RuntimeException("Popup window not found");
        }

        driver.switchTo().window(popupWindow);
        try { Thread.sleep(800); } catch (InterruptedException e) {} // Reduced from 1500

        StringBuilder allBureauData = new StringBuilder();
        allBureauData.append("===== BUREAU DATA EXTRACTION =====\n");
        allBureauData.append("Type: ").append(type).append("\n");
        allBureauData.append("Application ID: ").append(applicationId).append("\n");
        allBureauData.append("Extraction Time: ").append(LocalDateTime.now()).append("\n");
        allBureauData.append("==================================\n\n");

        try {
            List<WebElement> requestResponseLinks = findRequestResponseLinks(driver, wait);

            for (int i = 0; i < requestResponseLinks.size(); i++) {
                requestResponseLinks = findRequestResponseLinks(driver, wait);

                if (i < requestResponseLinks.size()) {
                    WebElement link = requestResponseLinks.get(i);

                    String linkText = link.getText();
                    String bureauKey = link.getAttribute("bureaukey");
                    String linkType = link.getAttribute("type");

                    allBureauData.append("\n").append("=".repeat(50)).append("\n");
                    allBureauData.append("Bureau: ").append(bureauKey != null ? bureauKey : "Unknown").append("\n");
                    allBureauData.append("Type: ").append(linkType != null ? linkType : linkText).append("\n");
                    allBureauData.append("=".repeat(50)).append("\n");

                    JavascriptExecutor js = (JavascriptExecutor) driver;
                    js.executeScript("arguments[0].click();", link);
                    try { Thread.sleep(500); } catch (InterruptedException e) {} // Reduced from 1000

                    Set<String> currentWindows = driver.getWindowHandles();
                    String dataWindow = null;

                    for (String windowHandle : currentWindows) {
                        if (!windowHandle.equals(mainWindow) && !windowHandle.equals(popupWindow)) {
                            dataWindow = windowHandle;
                            break;
                        }
                    }

                    if (dataWindow != null) {
                        driver.switchTo().window(dataWindow);

                        try {
                            WebElement preElement = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName("pre")));
                            String preContent = preElement.getText();
                            allBureauData.append(preContent).append("\n");
                        } catch (Exception e) {
                            String bodyText = driver.findElement(By.tagName("body")).getText();
                            allBureauData.append(bodyText).append("\n");
                        }

                        driver.close();
                        driver.switchTo().window(popupWindow);
                    }

                    try { Thread.sleep(250); } catch (InterruptedException e) {} // Reduced from 500
                }
            }

        } catch (Exception e) {
            System.err.println("Error during data extraction: " + e.getMessage());
        }

        try (FileWriter writer = new FileWriter(outputPath)) {
            writer.write(allBureauData.toString());
        }

        driver.close();
        driver.switchTo().window(mainWindow);
    }

    private static String compareFilesWithBureauInfo(String preFilePath, String postFilePath, 
                                                     ApplicationData app) {
        StringBuilder result = new StringBuilder();
        result.append("File: ").append(app.fileName).append("\n");

        try {
            List<String> preLines = Files.readAllLines(Paths.get(preFilePath));
            List<String> postLines = Files.readAllLines(Paths.get(postFilePath));

            List<BureauSection> preSections = parseBureauSections(preLines);
            List<BureauSection> postSections = parseBureauSections(postLines);

            List<String> preNormalized = normalizeContent(preLines);
            List<String> postNormalized = normalizeContent(postLines);

            preNormalized = removeMetadata(preNormalized);
            postNormalized = removeMetadata(postNormalized);

            if (preNormalized.equals(postNormalized)) {
                result.append("Status: MATCHED - No differences found");
            } else {
                result.append("Status: DIFFERENCES FOUND\n");
                result.append("Differences Details:\n");
                result.append(findDifferencesWithBureauInfo(preLines, postLines, preSections, postSections));
            }

        } catch (IOException e) {
            result.append("Status: ERROR - Could not compare files\n");
            result.append("Error: ").append(e.getMessage());
        }

        return result.toString();
    }

    private static List<BureauSection> parseBureauSections(List<String> lines) {
        List<BureauSection> sections = new ArrayList<>();
        String currentBureau = "Unknown";
        String currentType = "Unknown";
        int sectionStart = -1;

        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);

            if (line.startsWith("==================================================")) {
                if (i + 1 < lines.size() && lines.get(i + 1).startsWith("Bureau: ")) {
                    if (sectionStart >= 0) {
                        sections.add(new BureauSection(currentBureau, currentType, sectionStart, i - 1));
                    }

                    currentBureau = lines.get(i + 1).substring("Bureau: ".length()).trim();
                    if (i + 2 < lines.size() && lines.get(i + 2).startsWith("Type: ")) {
                        currentType = lines.get(i + 2).substring("Type: ".length()).trim();
                    }
                    sectionStart = i;
                }
            }
        }

        if (sectionStart >= 0) {
            sections.add(new BureauSection(currentBureau, currentType, sectionStart, lines.size() - 1));
        }

        return sections;
    }

    private static BureauSection findBureauSectionForLine(int lineNum, List<BureauSection> sections) {
        for (BureauSection section : sections) {
            if (lineNum >= section.startLine && lineNum <= section.endLine) {
                return section;
            }
        }
        return null;
    }

    private static String findDifferencesWithBureauInfo(List<String> preLines, List<String> postLines,
                                                        List<BureauSection> preSections, 
                                                        List<BureauSection> postSections) {
        StringBuilder diff = new StringBuilder();

        int maxLines = Math.max(preLines.size(), postLines.size());
        int diffCount = 0;
        int displayedDiffs = 0;
        final int MAX_DISPLAY = 20;

        for (int i = 0; i < maxLines; i++) {
            String preLine = i < preLines.size() ? preLines.get(i).trim() : "[MISSING]";
            String postLine = i < postLines.size() ? postLines.get(i).trim() : "[MISSING]";

            if (preLine.isEmpty() && postLine.isEmpty()) continue;
            if (preLine.contains("Extraction Time:") || postLine.contains("Extraction Time:")) continue;
            if (preLine.contains("Application ID:") || postLine.contains("Application ID:")) continue;
            if (preLine.startsWith("Type:") && postLine.startsWith("Type:")) continue;

            if (!preLine.equals(postLine)) {
                diffCount++;

                if (displayedDiffs < MAX_DISPLAY) {
                    BureauSection preSection = findBureauSectionForLine(i, preSections);
                    BureauSection postSection = findBureauSectionForLine(i, postSections);

                    diff.append("\nLine ").append(i + 1).append(":");

                    if (preSection != null) {
                        diff.append(" (Bureau: ").append(preSection.bureauName)
                            .append(", Type: ").append(preSection.type).append(")");
                    } else if (postSection != null) {
                        diff.append(" (Bureau: ").append(postSection.bureauName)
                            .append(", Type: ").append(postSection.type).append(")");
                    }

                    diff.append("\n");

                    String preDisplay = preLine.length() > 100 ? preLine.substring(0, 100) + "..." : preLine;
                    String postDisplay = postLine.length() > 100 ? postLine.substring(0, 100) + "..." : postLine;

                    diff.append("  PRE:  ").append(preDisplay).append("\n");
                    diff.append("  POST: ").append(postDisplay).append("\n");

                    displayedDiffs++;
                }
            }
        }

        if (diffCount > MAX_DISPLAY) {
            diff.append("\n... and ").append(diffCount - MAX_DISPLAY).append(" more differences");
        }

        diff.append("\n\nTotal differences found: ").append(diffCount);
        diff.append("\nPre file lines: ").append(preLines.size());
        diff.append("\nPost file lines: ").append(postLines.size());

        return diff.toString();
    }

    private static List<String> normalizeContent(List<String> lines) {
        return lines.stream()
                   .map(String::trim)
                   .filter(line -> !line.isEmpty())
                   .collect(Collectors.toList());
    }

    private static List<String> removeMetadata(List<String> lines) {
        List<String> filtered = new ArrayList<>();
        boolean skipMetadata = true;

        for (String line : lines) {
            if (skipMetadata && line.contains("==================================")) {
                skipMetadata = false;
                continue;
            }

            if (line.contains("Extraction Time:") || line.contains("Application ID:") || 
                line.startsWith("Type:")) {
                continue;
            }

            if (!skipMetadata) {
                filtered.add(line);
            }
        }

        return filtered;
    }

    // OPTIMIZED: Faster tree expansion with aggressive timing
    private static void expandAllJsTreeNodes(WebDriver driver, WebDriverWait wait) {
        wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".jstree")));
        JavascriptExecutor js = (JavascriptExecutor) driver;

        try {
            Object usedApi = js.executeScript(
                "try {" +
                "  if (window.$ && $('.jstree').length && $('.jstree').jstree) {" +
                "    var inst = $('.jstree').jstree(true) || $('.jstree').jstree(); " +
                "    if (inst && inst.open_all) { inst.open_all(); return true; }" +
                "  }" +
                "} catch(e) {}" +
                "return false;"
            );

            if (Boolean.TRUE.equals(usedApi)) {
                try {
                    wait.until(d -> driver.findElements(By.cssSelector(".jstree .jstree-loading")).isEmpty());
                } catch (TimeoutException ignored) {}
                return;
            }
        } catch (Exception ignored) {}

        int safety = 0;
        final int maxPasses = 50;

        while (safety++ < maxPasses) {
            List<WebElement> closedTogglers = driver.findElements(
                By.cssSelector(".jstree li.jstree-closed > i.jstree-ocl, " +
                              ".jstree li.jstree-closed > i.jstree-icon.jstree-ocl")
            );

            if (closedTogglers.isEmpty()) break;

            int before = closedTogglers.size();
            for (WebElement toggler : closedTogglers) {
                try {
                    js.executeScript("arguments[0].scrollIntoView({block:'center'});", toggler);
                } catch (JavascriptException ignored) {}

                try {
                    wait.until(ExpectedConditions.elementToBeClickable(toggler)).click();
                } catch (Exception clickEx) {
                    js.executeScript("arguments[0].click();", toggler);
                }

                try { Thread.sleep(50); } catch (InterruptedException ie) { // Reduced from 100
                    Thread.currentThread().interrupt(); 
                }
            }

            try {
                wait.until(d -> {
                    int after = driver.findElements(
                        By.cssSelector(".jstree li.jstree-closed > i.jstree-ocl, " +
                                      ".jstree li.jstree-closed > i.jstree-icon.jstree-ocl")
                    ).size();
                    return after < before;
                });
            } catch (TimeoutException ignored) {}
        }
    }

    private static List<WebElement> findRequestResponseLinks(WebDriver driver, WebDriverWait wait) {
        List<WebElement> links = new ArrayList<>();

        try {
            wait.until(ExpectedConditions.presenceOfElementLocated(By.className("jstree")));
            expandAllJsTreeNodes(driver, wait);
            List<WebElement> rawLinks = driver.findElements(By.xpath("//a[@raw]"));

            for (WebElement link : rawLinks) {
                String type = link.getAttribute("type");
                if ("request".equals(type) || "response".equals(type)) {
                    links.add(link);
                }
            }
        } catch (Exception e) {
            System.err.println("Error finding request/response links: " + e.getMessage());
        }

        return links;
    }

    private static void openMenuAndClick(WebDriver driver, WebDriverWait wait, String... labels) {
        if (labels == null || labels.length == 0) {
            throw new IllegalArgumentException("At least one label is required");
        }

        Actions actions = new Actions(driver);
        JavascriptExecutor js = (JavascriptExecutor) driver;

        WebElement scope = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("ul#menu")));

        for (int i = 0; i < labels.length; i++) {
            String label = labels[i].trim().replaceAll("\\s+", " ");

            String anchorsXpath = scope.getTagName().equalsIgnoreCase("ul") ? "./li/a" : "./ul/li/a";
            List<WebElement> anchors = scope.findElements(By.xpath(anchorsXpath));

            WebElement link = anchors.stream().filter(a -> {
                String direct = (String) js.executeScript(
                    "const a=arguments[0]; return [...a.childNodes].filter(n=>n.nodeType===3)" +
                    ".map(n=>n.textContent).join('').replace(/\\s+/g,' ').trim();", a);
                return label.equals(direct);
            }).findFirst().orElseThrow(() -> new NoSuchElementException("Not found: " + label));

            js.executeScript("arguments[0].scrollIntoView({block:'center'});", link);
            wait.until(ExpectedConditions.visibilityOf(link));

            boolean isLeaf = (i == labels.length - 1);
            if (isLeaf) {
                try {
                    wait.until(ExpectedConditions.elementToBeClickable(link)).click();
                } catch (Exception e) {
                    js.executeScript("arguments[0].click();", link);
                }
                return;
            } else {
                WebElement li = link.findElement(By.xpath("./ancestor::li[1]"));
                boolean opened = false;

                try {
                    actions.moveToElement(link).pause(Duration.ofMillis(50)).perform(); // Reduced from 100
                    opened = waitChildVisibleByJs(driver, li, Duration.ofSeconds(1));
                } catch (Exception ignored) {}

                if (!opened) {
                    try {
                        wait.until(ExpectedConditions.elementToBeClickable(link)).click();
                    } catch (Exception e) {
                        js.executeScript("arguments[0].click();", link);
                    }
                    opened = waitChildVisibleByJs(driver, li, Duration.ofSeconds(2));
                }

                if (!opened) {
                    throw new TimeoutException("Submenu did not open for: " + label);
                }
                scope = li;
            }
        }
    }

    private static boolean waitChildVisibleByJs(WebDriver driver, WebElement li, Duration timeout) {
        WebDriverWait w = new WebDriverWait(driver, timeout);
        try {
            return w.until(d -> {
                try {
                    WebElement ul = li.findElement(By.xpath("./ul"));
                    Object visible = ((JavascriptExecutor) d).executeScript(
                        "const u=arguments[0]; if(!u) return false;" +
                        "const s=getComputedStyle(u);" +
                        "if(s.display==='none' || s.visibility==='hidden' || +s.opacity===0) return false;" +
                        "const r=u.getBoundingClientRect(); return r.width>0 && r.height>0;", ul);
                    return Boolean.TRUE.equals(visible);
                } catch (NoSuchElementException | StaleElementReferenceException e) {
                    return false;
                }
            });
        } catch (TimeoutException e) {
            return false;
        }
    }
}